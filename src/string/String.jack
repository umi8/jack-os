// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int length, maxLen;
    field Array array;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        let maxLen = maxLength;
        if (maxLength = 0) {
            let array = Array.new(1);
        } else {
            let array = Array.new(maxLength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        let length = 0;
        let maxLen = 0;
        do array.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return array[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let array[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let array[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, v, digit;
        var char c;
        var String value;
        var boolean isNegative;

        let i = 0;
        let isNegative = false;
        if (charAt(0) = 45) {
            let i = i + 1;
            let isNegative = true;
        }
        let value = String.new(length);

        while (i < length) {
            let c = array[i];
            if ((47 < c) & (c < 58)) {
                do value.appendChar(c);
                let i = i + 1;
            } else {
                let i = length;
            }
        }

        let v = 0;
        let i = 0;
        while (i < value.length()) {
            let digit = value.charAt(i) - 48;
            let v = v * 10 + digit;
            let i = i + 1;
        }

        if (isNegative) {
            return -v;
        } else {
            return v;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var String s;
        var int i, isNegative;

        let isNegative = 0;
        if (val < 0) {
            do setCharAt(0, 45);
            let length = length + 1;
            let isNegative = 1;
        }

        let val = Math.abs(val);
        let s = int2String(val);
        let length = s.length() + isNegative;

        let i = 0;
        while (i < length) {
            do setCharAt(i + isNegative, s.charAt(i));
            let i = i + 1;
        }
        return;
    }

    method String int2String(int n) {
        var int lastDigit, quotient, c;
        var String s;

        let quotient = n / 10;
        let lastDigit = n - (quotient * 10);
        let c = lastDigit + 48;

        if (n < 10) {
            let s = String.new(maxLen);
            do s.appendChar(c);
            return s;
        } else {
            let s = String.new(maxLen);
            let s = s.int2String(quotient);
            do s.appendChar(c);
            return s;
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
